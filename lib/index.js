"use strict";
Object.defineProperties(exports, {
  INPUT: {get: function() {
      return INPUT;
    }},
  OUTPUT: {get: function() {
      return OUTPUT;
    }},
  LOW: {get: function() {
      return LOW;
    }},
  HIGH: {get: function() {
      return HIGH;
    }},
  PULL_NONE: {get: function() {
      return PULL_NONE;
    }},
  PULL_UP: {get: function() {
      return PULL_UP;
    }},
  PULL_DOWN: {get: function() {
      return PULL_DOWN;
    }},
  DigitalOutput: {get: function() {
      return DigitalOutput;
    }},
  DigitalInput: {get: function() {
      return DigitalInput;
    }},
  __esModule: {value: true}
});
var $__raspi_45_peripheral__,
    $___46__46__47_build_47_Release_47_addon__;
var Peripheral = ($__raspi_45_peripheral__ = require("raspi-peripheral"), $__raspi_45_peripheral__ && $__raspi_45_peripheral__.__esModule && $__raspi_45_peripheral__ || {default: $__raspi_45_peripheral__}).Peripheral;
var addon = ($___46__46__47_build_47_Release_47_addon__ = require("../build/Release/addon"), $___46__46__47_build_47_Release_47_addon__ && $___46__46__47_build_47_Release_47_addon__.__esModule && $___46__46__47_build_47_Release_47_addon__ || {default: $___46__46__47_build_47_Release_47_addon__}).default;
var INPUT = 0;
var OUTPUT = 1;
var LOW = 0;
var HIGH = 1;
var PULL_NONE = 0;
var PULL_UP = 1;
var PULL_DOWN = 2;
function parseConfig(config) {
  var pins;
  var pullResistor;
  if (typeof config == 'number' || typeof config == 'string') {
    pins = config;
    pullResistor = PULL_NONE;
  } else if (typeof config == 'object') {
    pins = config.pins;
    pullResistor = config.pullResistor || PULL_NONE;
    if ([PULL_NONE, PULL_DOWN, PULL_UP].indexOf(pullResistor) == -1) {
      throw new Error('Invalid pull resistor option ' + pullResistor);
    }
  } else {
    throw new Error('Invalid pin or configuration');
  }
  return {
    pins: pins,
    pullResistor: pullResistor
  };
}
var DigitalOutput = function DigitalOutput(config) {
  config = parseConfig(config);
  $traceurRuntime.superCall(this, $DigitalOutput.prototype, "constructor", [config.pins]);
  addon.init(this.pins[0], config.pullResistor, OUTPUT);
};
var $DigitalOutput = DigitalOutput;
($traceurRuntime.createClass)(DigitalOutput, {write: function(value) {
    if (!this.alive) {
      throw new Error('Attempted to write to a destroyed peripheral');
    }
    if ([LOW, HIGH].indexOf(value) == -1) {
      throw new Error('Invalid write value ' + value);
    }
    addon.write(this.pins[0], value);
  }}, {}, Peripheral);
var DigitalInput = function DigitalInput(config) {
  config = parseConfig(config);
  $traceurRuntime.superCall(this, $DigitalInput.prototype, "constructor", [config.pins[0]]);
  addon.init(this.pins[0], config.pullResistor, INPUT);
  this.value = addon.read(this.pins[0]);
};
var $DigitalInput = DigitalInput;
($traceurRuntime.createClass)(DigitalInput, {read: function() {
    return this.value = addon.read(this.pins[0]);
  }}, {}, Peripheral);

//# sourceMappingURL=data:application/json;base64,