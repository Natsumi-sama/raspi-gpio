"use strict";
Object.defineProperties(exports, {
  INPUT: {get: function() {
      return INPUT;
    }},
  OUTPUT: {get: function() {
      return OUTPUT;
    }},
  LOW: {get: function() {
      return LOW;
    }},
  HIGH: {get: function() {
      return HIGH;
    }},
  PULL_NONE: {get: function() {
      return PULL_NONE;
    }},
  PULL_UP: {get: function() {
      return PULL_UP;
    }},
  PULL_DOWN: {get: function() {
      return PULL_DOWN;
    }},
  DigitalOutput: {get: function() {
      return DigitalOutput;
    }},
  DigitalOutput: {get: function() {
      return DigitalOutput;
    }},
  __esModule: {value: true}
});
var $__raspi_45_peripheral__,
    $__build_47_Release_47_addon__;
var Peripheral = ($__raspi_45_peripheral__ = require("raspi-peripheral"), $__raspi_45_peripheral__ && $__raspi_45_peripheral__.__esModule && $__raspi_45_peripheral__ || {default: $__raspi_45_peripheral__}).Peripheral;
var addon = ($__build_47_Release_47_addon__ = require("./build/Release/addon"), $__build_47_Release_47_addon__ && $__build_47_Release_47_addon__.__esModule && $__build_47_Release_47_addon__ || {default: $__build_47_Release_47_addon__}).default;
var INPUT = 0;
var OUTPUT = 1;
var LOW = 0;
var HIGH = 1;
var PULL_NONE = 0;
var PULL_UP = 1;
var PULL_DOWN = 2;
addon.setCallback(function(pin, value) {
  if (pinInstances[pin]) {
    pinInstances[pin].trigger('change', value);
  }
});
function parseConfig(config) {
  var pin;
  var pullResistor;
  if (typeof config == 'number') {
    pin = config;
    pullResistor = PULL_NONE;
  } else if (typeof config == 'object') {
    pin = config.pin;
    pullResistor = config.pullResistor || PULL_NONE;
  }
  if (pinInstances[pin]) {
    throw new Error('Pin ' + pin + ' is already in use. Release that instance before instantiating.');
  }
  return {
    pin: pin,
    pullResistor: pullResistor
  };
}
var DigitalOutput = function DigitalOutput(config) {
  config = parseConfig(config);
  $traceurRuntime.superCall(this, $DigitalOutput.prototype, "constructor", [config.pin]);
  addon.init(this.pin, config.pullResistor, OUTPUT);
};
var $DigitalOutput = DigitalOutput;
($traceurRuntime.createClass)(DigitalOutput, {write: function(value) {
    if (!this.alive) {
      throw new Error('Attempted to write to a destroyed peripheral');
    }
    addon.write(this.pin, value);
  }}, {}, Peripheral);
var DigitalOutput = function DigitalOutput(config) {
  config = parseConfig(config);
  $traceurRuntime.superCall(this, $DigitalOutput.prototype, "constructor", [config.pin]);
  addon.init(this.pin, config.pullResistor, INPUT);
  this.value = addon.read(config.pin);
};
var $DigitalOutput = DigitalOutput;
($traceurRuntime.createClass)(DigitalOutput, {}, {}, Peripheral);

//# sourceMappingURL=data:application/json;base64,